Zalozeni projektu v Mavenu
--------------------------
Je treba pridat opravy defaultu:

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.test.skip>true</maven.test.skip>
    </properties>

    <dependencies>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>



Zavislost na casti Spring Frameworku pro JDBC
---------------------------------------------
Do pom.xml do elementu <dependencies> vlozte tyto zavislosti:    
    
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>4.3.14.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <version>2.2.3</version>
        </dependency>



Dotazy na vyzkouseni databaze
-----------------------------
SELECT count(*) FROM Customers
SELECT ID, Firstname, Lastname, Address, Deleted, Version FROM Customers WHERE ID=22
SELECT ID, Firstname, Lastname, Address, Deleted, Version FROM Customers
INSERT INTO customers (Firstname, Lastname, Address, Version) VALUES ("Jack", "Sparrow", "Port Royale", 0)
UPDATE customers SET Firstname = "Jack", Lastname = "Sparrow", Address = "Black Pearl", Version = Version + 1 WHERE id = 22 AND Version = 0    
UPDATE customers SET Deleted = TRUE, Version = Version + 1 WHERE id = 22 AND Version = 1



Spring Boot - vypnuti autodetekce DataSource
--------------------------------------------
Tento radek prijde do application.properties:

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration



INSERT, UPDATE a DELETE pomoci JdbcTemplate
-------------------------------------------
1. SQL UPDATE ma primo stejne pojmenovanou metodu v JdbcTemplate. Tedy jdbcTemplate.update(). Nezapomente pouzit parametry s ?

2. Pro SQL DELETE se pouziva take metoda jdbcTemplate.update().
V nasem pripade je tu jeste zvlastnost, ze my zaznamy v databazi nemazeme, ale pouze vyvolame update tak, ze nastavime vlastnost deleted = TRUE. 

3. Pro INSERT name rida JdbcTemplate zrovna uzivatelsky prijemne vytvorenu metodu, ktera by umela pridat zaznam do databaze a zaroven vratit vygenerovany primarni klic (ID). Proto se na to pouzije metoda jdbcTemplate.update(preparedStatementCreator, keyHolder), se kterou se pracuje ponekud pracne.
Zde je tedy listing: 

        GeneratedKeyHolder drzakNaVygenerovanyKlic = new GeneratedKeyHolder();
        String sql = "INSERT INTO customers (Firstname, Lastname, Address, Version) " +
                "VALUES (?, ?, ?, ?)";
        odesilacDotazu.update((Connection con) -> {
                    PreparedStatement prikaz = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
                    prikaz.setString(1, zakaznik.getFirstName());
                    prikaz.setString(2, zakaznik.getLastName());
                    prikaz.setString(3, zakaznik.getAddress());
                    prikaz.setInt(4, zakaznik.getVersion());
                    return prikaz;
                },
                drzakNaVygenerovanyKlic);
        zakaznik.setId(drzakNaVygenerovanyKlic.getKey().longValue());
